generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  theme          String          @default("blue")
  hashedPassword String?
  isAdmin        Boolean?        @default(false)
  accounts       Account[]
  sessions       Session[]
  userAccounts   UserAccount[]
  transactions   Transaction[]
  recurringItems RecurringItem[]
  categories     Category[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccountType {
  PERSONAL
  BUSINESS
  SAVINGS
  INVESTMENT
}

model UserAccount {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  type             AccountType      @default(PERSONAL)
  currency         String           @default("INR")
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  subAccounts      SubUserAccount[]
  transactionsFrom Transaction[]    @relation("TransactionsFrom")
  transactionsTo   Transaction[]    @relation("TransactionsTo")
  recurringItems   RecurringItem[]

  @@index([userId])
}

model SubUserAccount {
  id             String          @id @default(uuid())
  userAccountId  String
  userAccount    UserAccount     @relation(fields: [userAccountId], references: [id])
  name           String
  balance        Decimal         @default(0)
  description    String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  transactions   Transaction[]
  recurringItems RecurringItem[]

  @@index([userAccountId])
}

model Transaction {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  amount          Decimal
  description     String?
  date            DateTime        @default(now())
  type            TransactionType
  categoryId      String?
  category        Category?       @relation(fields: [categoryId], references: [id])
  fromAccountId   String?
  fromAccount     UserAccount?    @relation("TransactionsFrom", fields: [fromAccountId], references: [id])
  toAccountId     String?
  toAccount       UserAccount?    @relation("TransactionsTo", fields: [toAccountId], references: [id])
  subAccountId    String?
  subAccount      SubUserAccount? @relation(fields: [subAccountId], references: [id])
  isRecurring     Boolean         @default(false)
  recurringItemId String?
  recurringItem   RecurringItem?  @relation(fields: [recurringItemId], references: [id])
  isReviewed      Boolean         @default(false)
  notes           String?
  attachments     Attachment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bankSyncId      String?         @unique // For future bank sync integration
  metadata        Json? // For additional future-proof data

  @@index([userId])
  @@index([date])
  @@index([categoryId])
  @@index([fromAccountId])
  @@index([toAccountId])
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

model RecurringItem {
  id             String          @id @default(uuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  name           String
  amount         Decimal
  type           RecurringType
  categoryId     String?
  category       Category?       @relation(fields: [categoryId], references: [id])
  accountId      String?
  userAccount    UserAccount?    @relation(fields: [accountId], references: [id])
  subAccountId   String?
  subUserAccount SubUserAccount? @relation(fields: [subAccountId], references: [id])
  frequency      Frequency
  interval       Int             @default(1)
  startDate      DateTime
  endDate        DateTime?
  lastRun        DateTime?
  nextRun        DateTime
  isActive       Boolean         @default(true)
  transactions   Transaction[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([nextRun])
}

enum RecurringType {
  EXPENSE
  INCOME
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model Attachment {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  url           String
  type          String // e.g., 'receipt', 'invoice'
  name          String
  size          Int
  createdAt     DateTime    @default(now())

  @@index([transactionId])
}

model Category {
  id             String          @id @default(uuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  name           String
  type           CategoryType    @default(EXPENSE)
  color          String?
  description    String?
  icon           String?
  parentId       String?
  expenseLimit   Float?
  parent         Category?       @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children       Category[]      @relation("CategoryHierarchy")
  transactions   Transaction[]
  recurringItems RecurringItem[]

  @@index([userId])
}

enum CategoryType {
  EXPENSE
  INCOME
  TRANSFER
}
